function [explainedVariance, explainedVariance_shifted] = ...
    receptiveFieldShiftTest(caTraces, t_ca, ...
    toeplitz, t_toeplitz, stimSize, rfBins, ...
    receptiveFields, lambdas, numShifts)

%RECEPTIVEFIELDSHIFTTEST Test significance of receptive field fit.
%   [explainedVariance, explainedVariance_shifted] = ...
%    RECEPTIVEFIELDSHIFTTEST(traces, traceTimes, stimFrames, stimTimes, ...
%    RFtimesInFrames, runSpeed, runTime, runKernels, runWin, ...
%    receptiveFields, lambdas, numShifts) determines explained variance of
%    neural traces given their receptive fields, and explained variance of
%    surrogate data generated by shifting the neural traces in time.
%
%   explainedVariance   [neuron x 1], each entry:
%                       explained variance for fitted RF for each neuron
%   explainedVariance_shifted   [neuron x numShifts], 
%                       each entry: explained variance for each neuron and
%                       shift of neural response to stimulus
%
%   traces              [trTime x neuron]; calcium traces of neurons
%   traceTimes          [trTime x 1]; sample times of calcium traces
%   stimFrames          [time x rows x cols]; noise stimulus
%   stimTimes           [1 x time]; times of stimulus frames
%   RFtimesInFrames     [1 x RFframes]; frames of receptive field relative
%                       to stimulus frames
%   receptiveFields     [rows x columns x t x 2 x neuron]; fitted receptive
%                       fields
%   lambdas             [neuron x 1]; optimal lambda for RF fitting found
%                       with cross-validation
%   numShifts           int; number of shifts to generate null
%                       distributions

ignoreStimTimes = false(size(t_toeplitz));
[zTraces, stim, ~, validUnits, ~, ...
    lamStim, lamMatrix_stim] = ...
    whiteNoise.prepareDataForRFFit(caTraces, t_ca, toeplitz, t_toeplitz, ...
    stimSize, rfBins, lambdas, ignoreStimTimes);

% reshape receptive fields
receptiveFields = reshape(receptiveFields, [], ...
    size(receptiveFields, ndims(receptiveFields)));

% get explained variances on original and shifted data
explainedVariance = NaN(size(caTraces,2), 1);
explainedVariance_shifted = NaN(size(caTraces,2), numShifts);

lamValues = unique(lamStim);
shifts = randi(size(zTraces,1), numShifts, 1);

% Make sure to keep size of shiftTraces to <1 bill. elements
batches = ceil(size(zTraces,1) * numShifts * size(zTraces,2) / 1000000000);
batchSize = ceil(size(zTraces,2) / batches);
for b = 1:batches
    indBatch = (1:batchSize) + (b-1)*batchSize;
    indBatch(indBatch > size(zTraces,2)) = [];
    shiftedTraces = NaN(size(zTraces,1), numShifts, length(indBatch));
    for sh = 1:numShifts
        shiftedTraces(:,sh,:) = circshift(zTraces(:,indBatch), shifts(sh), 1);
    end
    for lam = 1:length(lamValues)
        indNeurons = find((lamStim(indBatch) == lamValues(lam)) & ...
            validUnits(indBatch));
        if isempty(indNeurons)
            continue
        end
        lms = lamMatrix_stim .* lamValues(lam);
        A = gpuArray([stim; lms]);

        pred = stim * receptiveFields(:, indBatch(indNeurons));
        explainedVariance(indBatch(indNeurons)) = 1 - ...
            sum((zTraces(:, indBatch(indNeurons)) - pred) .^ 2,1) ./ ...
            sum((zTraces(:, indBatch(indNeurons)) - ...
            mean(zTraces(:, indBatch(indNeurons)),1)) .^ 2,1);

        for iCell = 1:length(indNeurons)
            tr = shiftedTraces(:,:,indNeurons(iCell));
            B = gather(A \ gpuArray(padarray(tr, size(lms,1), 'post')));
            pred = stim * B;
            explainedVariance_shifted(indBatch(indNeurons(iCell)), :) = ...
                1 - ...
                sum((tr - pred) .^ 2,1) ./ sum((tr - mean(tr,1)) .^ 2,1);
        end
    end
end